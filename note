Here’s a clean, step-by-step fix and how to test it in Postman.
Step 1: Add server-side rule to block reusing the same password
We enforce this in the reset endpoint so it cannot be bypassed by any client.
File: backend/routes/auth.js
Inside POST /api/auth/reset-password, after you have the user and before hashing/saving the new password, compare the submitted newPassword with the current stored hash.
Edit made:
If bcrypt.compare(newPassword, user.password) is true, return 400 with:
“Please set a different password than the one used during registration.”
Your updated reset section now does this:
Checks difference
Hashes and saves only if different
Clears the OTP/reset state fields
Returns success
No frontend change is required; your React pages already surface server errors under the form.


Step 2: Restart backend if needed
If your server doesn’t hot-reload on file changes, restart it so the new logic is active.


Step 3: Test with Postman (both flows)
A) Token flow (preferred)
Call Forgot Password:
POST http://localhost:5000/api/auth/forgot-password
Body: { "identifier": "<email or username>" }
Check console for OTP (if email not configured) and call Verify OTP:
POST http://localhost:5000/api/auth/verify-reset-otp
Body: { "identifier": "<email or username>", "otp": "<6-digit>" }
Response contains resetToken
Attempt reset with same password as current:
POST http://localhost:5000/api/auth/reset-password
Body:
{ "token": "<resetToken>", "newPassword": "<same_as_current>" }
Expect: 400 with error
“Please set a different password than the one used during registration.”
Attempt reset with a different password:
POST same URL with
{ "token": "<resetToken>", "newPassword": "New@1234" }
Expect: 200 with “Password reset successful”


B) Fallback flow (identifier + OTP)
Same steps 1–2 as above to get a valid OTP.
Attempt reset with same password:
POST http://localhost:5000/api/auth/reset-password
Body:
{ "identifier": "<email or username>", "otp": "<6-digit>", "newPassword": "<same_as_current>" }
Expect: 400 with the same error
Attempt with different password:
Body:
{ "identifier": "<email or username>", "otp": "<6-digit>", "newPassword": "New@1234" }
Expect: 200 with success


Step 4: Confirm frontend behavior
On your ResetPassword.jsx, submitting a reused password will now show the returned error message under the form, and no redirect occurs. Nothing else needed client-side.
If you want, I can also add a small client hint like “New password must be different from your current one.” near the input, but security-wise the server-side check you now have is the real protection.
Ready to test with Postman as above.